package extension.ast.visitor;

import extension.ast.node.declaration.LangMethodDeclaration;
import extension.ast.node.declaration.LangSingleVariableDeclaration;
import extension.ast.node.declaration.LangTypeDeclaration;
import extension.ast.node.expression.*;
import extension.ast.node.literal.*;
import extension.ast.node.metadata.LangAnnotation;
import extension.ast.node.metadata.comment.LangComment;
import extension.ast.node.pattern.LangLiteralPattern;
import extension.ast.node.pattern.LangVariablePattern;
import extension.ast.node.statement.*;
import extension.ast.node.unit.LangCompilationUnit;

// Visitor interface for traversing the AST
public interface LangASTVisitor {
    void visit(LangCompilationUnit langCompilationUnit);
    void visit(LangTypeDeclaration langTypeDeclaration);
    void visit(LangMethodDeclaration methodDeclaration);
    void visit(LangSingleVariableDeclaration langSingleVariableDeclaration);
    void visit(LangBlock langBlock);
    void visit(LangReturnStatement langReturnStatement);
    void visit(LangInfixExpression langInfixExpression);
    void visit(LangMethodInvocation langMethodInvocation);
    void visit(LangSimpleName langSimpleName);
    void visit(LangIfStatement langIfStatement);
    void visit(LangWhileStatement langWhileStatement);
    void visit(LangForStatement langForStatement);
    void visit(LangExpressionStatement langExpressionStatement);
    void visit(LangAssignment langAssignment);
    void visit(LangBooleanLiteral langBooleanLiteral);
    void visit(LangNumberLiteral langNumberLiteral);
    void visit(LangStringLiteral langStringLiteral);
    void visit(LangListLiteral langListLiteral);
    void visit(LangFieldAccess langFieldAccess);
    void visit(LangDictionaryLiteral langDictionaryLiteral);
    void visit(LangTupleLiteral langTupleLiteral);
    void visit(LangImportStatement langImportStatement);
    void visit(LangPrefixExpression langPrefixExpression);
    void visit(LangPostfixExpression langPostFixExpression);
    void visit(LangNullLiteral langNullLiteral);
    void visit(LangTryStatement langTryStatement);
    void visit(LangCatchClause langCatchClause);
    void visit(LangBreakStatement langBreakStatement);
    void visit(LangContinueStatement langContinueStatement);
    void visit(LangDelStatement langDelStatement);
    void visit(LangGlobalStatement langGlobalStatement);
    void visit(LangPassStatement langPassStatement);
    void visit(LangYieldStatement langYieldStatement);
    void visit(LangAnnotation langAnnotation);
    void visit(LangAssertStatement langAssertStatement);
    void visit(LangThrowStatement langThrowStatement);
    void visit(LangWithContextItem langWithContextItem);
    void visit(LangWithStatement langWithStatement);
    void visit(LangNonLocalStatement langNonLocalStatement);
    void visit(LangAsyncStatement langAsyncStatement);
    void visit(LangAwaitExpression langAwaitExpression);
    void visit(LangLambdaExpression langLambdaExpression);
    void visit(LangSwitchStatement langSwitchStatement);
    void visit(LangCaseStatement langCaseStatement);
    void visit(LangVariablePattern langVariablePattern);
    void visit(LangLiteralPattern langLiteralPattern);
    void visit(LangComment langComment);
}